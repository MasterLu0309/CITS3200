import cv2
import datetime
import time
import psutil  # To monitor system memory and CPU usage

cap = cv2.VideoCapture(0)

fourcc = cv2.VideoWriter_fourcc(*'XVID')
out = None

is_recording = False
prev_frame = None

stop_delay = 2  # No motion delay to stop recording
last_motion_time = 0  

if not cap.isOpened():
    print("Error: Could not open camera")
    exit()

# Track performance metrics
start_time = time.time()
frame_count = 0

# Memory usage tracker
def get_memory_usage():
    process = psutil.Process()
    mem_info = process.memory_info()
    return mem_info.rss / (1024 * 1024)  

print(f"Initial memory usage: {get_memory_usage()} MB")

while True:
    ret, frame = cap.read()
    if not ret:
        print("Error: Could not read frame")
        break

    frame_count += 1

    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    gray = cv2.GaussianBlur(gray, (21, 21), 0)

    if prev_frame is None:
        prev_frame = gray
        continue

    frame_delta = cv2.absdiff(prev_frame, gray)
    thresh = cv2.threshold(frame_delta, 25, 255, cv2.THRESH_BINARY)[1]
    thresh = cv2.dilate(thresh, None, iterations=2)

    contours, _ = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    movement_detected = False
    for contour in contours:
        if cv2.contourArea(contour) < 1000:
            continue
        movement_detected = True
        last_motion_time = time.time()
        (x, y, w, h) = cv2.boundingRect(contour)
        cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)

    if movement_detected and not is_recording:
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"output_{timestamp}.avi"
        print(f"Recording started: {filename}")
        out = cv2.VideoWriter(filename, fourcc, 20.0, (frame.shape[1], frame.shape[0]))
        is_recording = True

    elif not movement_detected and is_recording:
        if time.time() - last_motion_time > stop_delay:
            print("Recording stopped due to no movement...")
            is_recording = False
            out.release()
            out = None

    current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")[:-3]
    cv2.putText(frame, current_time, (frame.shape[1] - 400, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 255), 2)

    if is_recording:
        out.write(frame)

    cv2.imshow('Camera Feed', frame)
    cv2.imshow('Frame Delta', frame_delta)

    prev_frame = gray

    key = cv2.waitKey(1) & 0xFF
    if key == ord('q'):
        print("Exiting...")
        break

    if frame_count % 100 == 0:
        elapsed_time = time.time() - start_time
        memory_usage = get_memory_usage()
        print(f"Processed {frame_count} frames in {elapsed_time:.2f} seconds.")
        print(f"Current memory usage: {memory_usage} MB")

cap.release()
if out is not None:
    out.release()
cv2.destroyAllWindows()

print(f"Final memory usage: {get_memory_usage()} MB")
